<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ijw.Next.Reflection</name>
    </assembly>
    <members>
        <member name="T:ijw.Next.Reflection.ObjectExt">
            <summary>
            
            </summary>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.SetPropertyValue``1(``0,System.String,System.String)">
            <summary>
            将字符串尝试转型成属性的类型（用默认的FormatProvider）, 并把成功转型后的值设置给指定的属性.多用于从文本文件中构建对象.
            转型失败将抛出异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="propertyName">属性的名字, 必须存在</param>
            <param name="stringvalue">属性值</param>
        </member>
        <member name="T:ijw.Next.Reflection.ReflectionHelper">
            <summary>
            反射功能帮助类
            </summary>
        </member>
        <member name="M:ijw.Next.Reflection.ReflectionHelper.CreateNewInstance``1(System.String[],System.String[])">
            <summary>
            根据属性名列表和值（字符串形式）列表创建指定类型的新实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyNames">属性名列表</param>
            <param name="values">字符串形式的值列表</param>
            <returns>创建的新实例</returns>
        </member>
        <member name="M:ijw.Next.Reflection.ReflectionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取属性的名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr">实例属性的表达式, 如foo => foo.bar </param>
            <returns>属性的名称</returns>
        </member>
        <member name="T:ijw.Next.Reflection.StringExt">
            <summary>
            
            </summary>
        </member>
        <member name="M:ijw.Next.Reflection.StringExt.ToEnum(System.String,System.Type,System.Boolean)">
            <summary>
            将字符串转换为指定的枚举对象
            </summary>
            <param name="value">字符串</param>
            <param name="enumType">欲转换的枚举类型</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>转换成功返回转换后的枚举对象, 转换失败时抛出异常</returns>
        </member>
        <member name="M:ijw.Next.Reflection.StringExt.ToEnum(System.String,System.Type,System.Object,System.Boolean)">
            <summary>
            将字符串转换为指定的枚举对象
            </summary>
            <param name="value">字符串</param>
            <param name="enumType">欲转换的枚举类型</param>
            <param name="defaultValue">转换失败时返回一个默认值</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>转换成功返回转换后的枚举对象, 转换失败返回指定的默认值</returns>
        </member>
        <member name="M:ijw.Next.Reflection.StringExt.ToEnum``1(System.String,System.Boolean)">
            <summary>
            将字符串转换为指定的枚举对象
            </summary>
            <param name="value">字符串</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>转换成功返回转换后的枚举对象, 转换失败返回指定的默认值</returns>
        </member>
        <member name="M:ijw.Next.Reflection.StringExt.ToEnum``1(System.String,``0,System.Boolean)">
            <summary>
            将字符串转换为指定的枚举对象
            </summary>
            <param name="value">字符串</param>
            <param name="defaultValue">转换失败时返回一个默认值</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>转换成功返回转换后的枚举对象, 转换失败返回指定的默认值</returns>
        </member>
        <member name="M:ijw.Next.Reflection.StringExt.To(System.String,System.Type,System.Boolean)">
            <summary>
            将字符串尝试转型成指定的类型（用默认的FormatProvider）
            支持的值类型目前包括:枚举、DBNull、Boolean/Char/(S)Byte/DateTime/(U)Int16/32/64/Float/Double/Decimal/Guid及相应可空类型
            </summary>
            <param name="value">字符串</param>
            <param name="type">欲转换成的类型</param>
            <param name="useDefaultValueWhenCastFailed">不支持类型、转型失败或者值溢出的时候是否返回默认值而不抛出异常.默认是否</param>
            <returns>转型后的值</returns>
            <remarks>
            性能提示: 此方法对于值类型涉及装箱和拆箱.
            </remarks>
        </member>
        <member name="T:ijw.Next.Reflection.StringToValueTypeExt">
            <summary>
            
            </summary>
        </member>
        <member name="M:ijw.Next.Reflection.StringToValueTypeExt.To``1(System.String,System.Boolean)">
            <summary>
            将字符串尝试转型成指定的值类型（用默认的FormatProvider）
            支持的值类型目前包括:枚举、DBNull、Boolean/Char/(S)Byte/DateTime/(U)Int16/32/64/Float/Double/Decimal/Guid及相应可空类型
            </summary>
            <typeparam name="T">欲转换成的类型</typeparam>
            <param name="value">字符串</param>
            <param name="useDefaultValueWhenCastFail">不支持类型、转型失败或者值溢出的时候是否返回默认值而不抛出异常.默认是否</param>
            <returns>转型后的值</returns>
            <remarks>
            性能提示: 此方法内部调用了String.To(typeof(T)), 因此对于值类型涉及装箱和拆箱.
            </remarks>
        </member>
        <member name="M:ijw.Next.Reflection.StringToValueTypeExt.ToNullable``1(System.String,System.Boolean)">
            <summary>
            将字符串尝试转型成指定的可空值类型（用默认的FormatProvider）
            支持的值类型目前包括:枚举、DBNull、Boolean/Char/(S)Byte/DateTime/(U)Int16/32/64/Float/Double/Decimal/Guid及相应可空类型
            </summary>
            <typeparam name="T">欲转换成的类型</typeparam>
            <param name="value">字符串</param>
            <param name="useDefaultValueWhenCastFail">不支持类型、转型失败或者值溢出的时候是否返回默认值而不抛出异常.默认是否</param>
            <returns>转型后的值</returns>
            <remarks>
            性能提示: 此方法内部调用了String.To(typeof(T)), 因此对于值类型涉及装箱和拆箱.
            </remarks>
        </member>
    </members>
</doc>
