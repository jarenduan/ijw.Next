<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ijw.Next.Reflection</name>
    </assembly>
    <members>
        <member name="T:ijw.Next.Reflection.ObjectExt">
            <summary>
            
            </summary>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.SetPropertyValue``1(``0,System.String,System.String)">
            <summary>
            将字符串尝试转型成属性的类型（用默认的FormatProvider）, 并把成功转型后的值设置给指定的属性. 多用于从文本文件中构建对象.
            转型失败将抛出异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="propertyName">属性的名字, 必须存在</param>
            <param name="stringvalue">属性值</param>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
            设置指定的属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="propertyName">属性的名字</param>
            <param name="value">属性值</param>
            <remarks>
            属性值运行时类型如果不符合, 将会抛出异常
            </remarks>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.InvokeMethod``1(``0,System.String,System.Object[])">
            <summary>
            反射调用某个方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName">方法名</param>
            <param name="paras">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.InvokeGenericMethod``1(``0,System.String,System.Type[],System.Object[])">
            <summary>
            反射调用某个泛型方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName">方法名</param>
            <param name="types">泛型参数列表</param>
            <param name="paras">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.TryInvokeMethod``1(``0,System.String,System.Object[])">
            <summary>
            尝试反射调用某个方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName">方法名</param>
            <param name="paras">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.TryInvokeGenericMethod``1(``0,System.String,System.Type[],System.Object[])">
            <summary>
            尝试反射调用某个方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName">方法名</param>
            <param name="types">泛型参数列表</param>
            <param name="paras">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.TryInvokeMethod``1(``0,System.String,System.Object@,System.Object[])">
            <summary>
            尝试反射调用某个方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName">方法名</param>
            <param name="result">返回结果</param>
            <param name="paras">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.TryInvokeGenericMethod``1(``0,System.String,System.Type[],System.Object@,System.Object[])">
            <summary>
            尝试反射调用某个方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="methodName">方法名</param>
            <param name="types">泛型参数列表</param>
            <param name="result">返回结果</param>
            <param name="paras">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Reflection.ObjectExt.EqualsNullable``1(``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:ijw.Next.Reflection.ReflectionHelper">
            <summary>
            反射功能帮助类
            </summary>
        </member>
        <member name="M:ijw.Next.Reflection.ReflectionHelper.CreateNewInstance``1(System.String[],System.String[])">
            <summary>
            根据属性名列表和值（字符串形式）列表创建指定类型的新实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyNames">属性名列表</param>
            <param name="values">字符串形式的值列表</param>
            <returns>创建的新实例</returns>
        </member>
        <member name="M:ijw.Next.Reflection.ReflectionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取属性的名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr">实例属性的表达式, 如foo => foo.bar </param>
            <returns>属性的名称</returns>
        </member>
    </members>
</doc>
