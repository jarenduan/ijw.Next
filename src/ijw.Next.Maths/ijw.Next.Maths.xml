<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ijw.Next.Maths</name>
    </assembly>
    <members>
        <member name="T:ijw.Next.Maths.Distance">
            <summary>
            向量距离计算
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.Distance.EuclideanBetween(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的欧氏距离
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>向量1与向量2之间的欧氏距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Distance.EuclideanBetween(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的欧氏距离
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <param name="weights">权值</param>
            <returns>向量1与向量2之间的欧氏距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Distance.ManhattanBetween(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的曼哈顿距离
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>向量1与向量2之间的曼哈顿距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Distance.ManhattanBetween(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的曼哈顿距离
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>向量1与向量2之间的曼哈顿距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Distance.MinkowskiBetween(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector,System.Int32)">
            <summary>
            计算向量间的闵氏距离
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>向量1与向量2之间的闵氏距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Distance.MinkowskiBetween(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector,System.Int32,ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的闵氏距离
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>向量1与向量2之间的闵氏距离</returns>
        </member>
        <member name="T:ijw.Next.Maths.DistanceBase">
            <summary>
            距离计算器基类
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.DistanceBase.GetDistance(System.Collections.Generic.ICollection{System.Double},System.Collections.Generic.ICollection{System.Double})">
            <summary>
            获取两个向量间的距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.DistanceBase.GetDistance(ijw.Next.Collection.IIndexable{System.Double},ijw.Next.Collection.IIndexable{System.Double})">
            <summary>
            获取两个向量间的距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.DistanceBase.GetDistance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            获取两个向量间的距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.DistanceBase.getDistance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            获取两个向量间的距离，不用检查向量维度是否匹配
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>距离</returns>
        </member>
        <member name="T:ijw.Next.Maths.EuclideanDistance">
            <summary>
            计算向量间的欧氏距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.EuclideanDistance.#ctor">
            <summary>
            构造一个欧式距离计算器
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.IDistanceBase">
            <summary>
            计算向量间的距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.IDistanceBase.GetDistance(System.Collections.Generic.ICollection{System.Double},System.Collections.Generic.ICollection{System.Double})">
            <summary>
            计算向量间的距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.IDistanceBase.GetDistance(ijw.Next.Collection.IIndexable{System.Double},ijw.Next.Collection.IIndexable{System.Double})">
            <summary>
            计算向量间的距离
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.ManhattanDistance">
            <summary>
            计算向量间的曼哈顿距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.ManhattanDistance.getDistance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            计算两个向量的的曼哈顿距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>曼哈顿距离</returns>
        </member>
        <member name="T:ijw.Next.Maths.MinkowskiDistance">
            <summary>
            计算向量间的闵氏距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.MinkowskiDistance.#ctor(System.Int32)">
            <summary>
            构造一个闵氏距离计算器
            </summary>
            <param name="lambda"></param>
        </member>
        <member name="P:ijw.Next.Maths.MinkowskiDistance.Lambda">
            <summary>
            距离幂值
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.MinkowskiDistance.getDistance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            计算向量间的闵氏距离
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.WeightedDistanceBase">
            <summary>
            计算向量间的加权距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.WeightedDistanceBase.#ctor(System.Collections.Generic.ICollection{System.Double})">
            <summary>
            构造一个加权向量距离计算器
            </summary>
            <param name="weights">权重集合</param>
        </member>
        <member name="M:ijw.Next.Maths.WeightedDistanceBase.#ctor(ijw.Next.Collection.IIndexable{System.Double})">
            <summary>
            构造一个加权向量距离计算器
            </summary>
            <param name="weights">权重集合</param>
        </member>
        <member name="M:ijw.Next.Maths.WeightedDistanceBase.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            构造一个加权向量距离计算器
            </summary>
            <param name="weights">权重集合</param>
        </member>
        <member name="M:ijw.Next.Maths.WeightedDistanceBase.GetDistance(System.Collections.Generic.ICollection{System.Double},System.Collections.Generic.ICollection{System.Double})">
            <summary>
            获取两个向量间的距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.WeightedDistanceBase.GetDistance(ijw.Next.Collection.IIndexable{System.Double},ijw.Next.Collection.IIndexable{System.Double})">
            <summary>
            获取两个向量间的距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.WeightedDistanceBase.GetDistance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            获取两个向量间的距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>距离</returns>
        </member>
        <member name="P:ijw.Next.Maths.WeightedDistanceBase.Weights">
            <summary>`
            各维度权值
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.WeightedDistanceBase.Dimention">
            <summary>
            此距离计算器的计算维度
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.WeightedEuclideanDistance">
            <summary>
            计算向量间的加权欧氏距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.WeightedEuclideanDistance.#ctor(System.Collections.Generic.ICollection{System.Double})">
            <summary>
            构造一个加权欧氏距离计算器
            </summary>
            <param name="weights">权重集合</param>
        </member>
        <member name="M:ijw.Next.Maths.WeightedEuclideanDistance.#ctor(ijw.Next.Collection.IIndexable{System.Double})">
            <summary>
            构造一个加权欧氏距离计算器
            </summary>
            <param name="weights">权重集合</param>
        </member>
        <member name="T:ijw.Next.Maths.WeightedManhattanDistance">
            <summary>
            计算向量间的加权曼哈顿距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.WeightedManhattanDistance.#ctor(System.Collections.Generic.ICollection{System.Double})">
            <summary>
            构造一个加权曼哈顿距离计算器
            </summary>
            <param name="weights">权重集合</param>
        </member>
        <member name="M:ijw.Next.Maths.WeightedManhattanDistance.#ctor(ijw.Next.Collection.IIndexable{System.Double})">
            <summary>
            构造一个加权曼哈顿距离计算器
            </summary>
            <param name="weights">权重集合</param>
        </member>
        <member name="M:ijw.Next.Maths.WeightedManhattanDistance.getDistance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            计算两个向量的的加权曼哈顿距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>加权曼哈顿距离</returns>
        </member>
        <member name="T:ijw.Next.Maths.WeightedMinkowskiDistance">
            <summary>
            计算向量间的加权闵氏距离
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.WeightedMinkowskiDistance.#ctor(System.Int32,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            构造一个加权闵氏距离计算器
            </summary>
            <param name="lambda">距离幂值</param>
            <param name="weights">权重集合</param>
        </member>
        <member name="M:ijw.Next.Maths.WeightedMinkowskiDistance.#ctor(System.Int32,ijw.Next.Collection.IIndexable{System.Double})">
            <summary>
            构造一个加权闵氏距离计算器
            </summary>
            <param name="lambda">距离幂值</param>
            <param name="weights">权重集合</param>
        </member>
        <member name="P:ijw.Next.Maths.WeightedMinkowskiDistance.Lambda">
            <summary>
            距离幂值
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.WeightedMinkowskiDistance.getDistance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            计算两个向量的的加权曼哈顿距离
            </summary>
            <param name="v1">第一个向量</param>
            <param name="v2">第二个向量</param>
            <returns>加权曼哈顿距离</returns>
        </member>
        <member name="T:ijw.Next.Maths.ErrorTolerantVectorEqualityComparer">
            <summary>
            误差容忍向量比较器
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.ErrorTolerantVectorEqualityComparer.EquataionPrecision">
            <summary>
            误差容忍度
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.ErrorTolerantVectorEqualityComparer.Equals(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
            考虑误差容忍度的相等比较
            </summary>
            <param name="x">第1个向量</param>
            <param name="y">第2个向量</param>
            <returns>相差在误差容忍度内，返回true，反之，返回false.</returns>
        </member>
        <member name="M:ijw.Next.Maths.ErrorTolerantVectorEqualityComparer.GetHashCode(ijw.Next.Maths.Vector)">
            <summary>
            获取hash值
            </summary>
            <param name="obj"></param>
            <returns>hash值</returns>
        </member>
        <member name="T:ijw.Next.Maths.IFunction`2">
            <summary>
            表示输入与输出之间的函数
            </summary>
            <typeparam name="TInput">输入类型</typeparam>
            <typeparam name="TOutput">输出类型</typeparam>
        </member>
        <member name="M:ijw.Next.Maths.IFunction`2.Calculate(`0)">
            <summary>
            计算输出值，其与输入相同
            </summary>
            <param name="input">指定的输入</param>
            <returns>输出</returns>
        </member>
        <member name="T:ijw.Next.Maths.IMimoMathFunction">
            <summary>
            表示一个多输入多输出的数学函数
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.ISisoMathFunction">
            <summary>
            表示一个数学函数
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.ISisoMathFunctionWithDerivative">
            <summary>
            可以计算导数的数学函数
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.ISisoMathFunctionWithDerivative.CalculateDerivative(System.Double)">
            <summary>
            计算指定输入的导数
            </summary>
            <param name="input">指定的输入</param>
            <returns>导数</returns>
        </member>
        <member name="T:ijw.Next.Maths.LinearFunction">
            <summary>
            线性函数
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.LinearFunction.K">
            <summary>
            斜率
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.LinearFunction.Calculate(System.Double)">
            <summary>
            计算输出值，其与输入相同
            </summary>
            <param name="input">指定的输入</param>
            <returns>输出</returns>
        </member>
        <member name="M:ijw.Next.Maths.LinearFunction.CalculateDerivative(System.Double)">
            <summary>
            计算导数
            </summary>
            <param name="input">指定的输入</param>
            <returns>恒等为斜率</returns>
        </member>
        <member name="T:ijw.Next.Maths.ReLUFunction">
            <summary>
            ReLU函数
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.ReLUFunction.Calculate(System.Double)">
            <summary>
            计算输出值，其与输入相同
            </summary>
            <param name="input">指定的输入</param>
            <returns>输入大于0，返回输入本身，否则返回0</returns>
        </member>
        <member name="M:ijw.Next.Maths.ReLUFunction.CalculateDerivative(System.Double)">
            <summary>
            计算指定输入的导数
            </summary>
            <param name="input">指定的输入</param>
            <returns>输入大于0，返回1；反之返回0</returns>
        </member>
        <member name="T:ijw.Next.Maths.SigmodFunction">
            <summary>
            Sigmod函数
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.SigmodFunction.Calculate(System.Double)">
            <summary>
            计算输出值
            </summary>
            <param name="input">指定的输入</param>
            <returns>输出, 处于(0, 1)区间</returns>
        </member>
        <member name="M:ijw.Next.Maths.SigmodFunction.CalculateDerivative(System.Double)">
            <summary>
            计算指定输入的导数
            </summary>
            <param name="input">指定的输入</param>
            <returns>导数</returns>
        </member>
        <member name="T:ijw.Next.Maths.Functions.TanHFunction">
            <summary>
            双曲正切函数
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.Functions.TanHFunction.Calculate(System.Double)">
            <summary>
            计算输出值
            </summary>
            <param name="input">指定的输入,</param>
            <returns>输出，属于[-1,1]</returns>
        </member>
        <member name="M:ijw.Next.Maths.Functions.TanHFunction.CalculateDerivative(System.Double)">
            <summary>
            计算指定输入的导数
            </summary>
            <param name="input">指定的输入</param>
            <returns>导数</returns>
        </member>
        <member name="T:ijw.Next.Maths.Matrix`1">
            <summary>
            矩阵
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ijw.Next.Maths.Matrix`1.CountOfX">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.Matrix`1.CountOfY">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.Matrix`1.Data">
            <summary>
            内部数据
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.Matrix`1.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="countOfX"></param>
            <param name="countOfY"></param>
        </member>
        <member name="T:ijw.Next.Maths.IMimoMathModel">
            <summary>
            一个数学模型
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.IMimoPredictionModel">
            <summary>
            预测模型
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.IMisoMathModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.IMisoPredictionModel">
            <summary>
            预测模型
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.IModel`2">
            <summary>
            一个输入与输出的模型
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="P:ijw.Next.Maths.IModel`2.InputDimension">
            <summary>
            输入维度
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.IModel`2.OutputDimension">
            <summary>
            输出维度
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.IModel`2.Input">
            <summary>
            输入
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.IModel`2.Output">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.IModel`2.Calculate">
            <summary>
            根据当前的输入进行计算，更新输出
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.ISimoMathModel">
            <summary>
            一个数学模型
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.ISimoPredictionModel">
            <summary>
            预测模型
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.ISisoMathModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.ISisoPredictionModel">
            <summary>
            预测模型
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.MimoModelBase">
            <summary>
            默认实现
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.MimoModelBase.Input">
            <summary>
            输入
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.MimoModelBase.Output">
            <summary>
            输出
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.MimoModelBase.InputDimension">
            <summary>
            输入维度
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.MimoModelBase.OutputDimension">
            <summary>
            输出维度
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.MimoModelBase.#ctor(System.Int32,System.Int32)">
            <summary>
            使用数组实现的构造函数
            </summary>
            <param name="inputDimension"></param>
            <param name="outputDimension"></param>
        </member>
        <member name="M:ijw.Next.Maths.MimoModelBase.Calculate">
            <summary>
            根据当前的输入进行计算，更新输出
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.IMOPredictionModel">
            <summary>
            预测模型
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.IMOPredictionModel.DesireOutput">
            <summary>
            期望输出
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.IPredictionModel">
            <summary>
            预测模型
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.IPredictionModel.GetError">
            <summary>
            计算绝对误差
            </summary>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Maths.IPredictionModel.GetRelativeError">
            <summary>
            计算相对误差
            </summary>
            <returns></returns>
        </member>
        <member name="T:ijw.Next.Maths.ISOPredictionModel">
            <summary>
            预测模型
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.ISOPredictionModel.DesireOutput">
            <summary>
            期望输出
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.TargetFunctionAdapter">
            <summary>
             目标函数包装器, 其内部包裹了一个更高维的模型, 把输入维度降低, 把输出维度降为1维
             把多目标函数转换成单目标函数, 使调用者认为就是在使用一个单输出的模型. 每个包装器对应一个特定FullInput.
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.TargetFunctionAdapter.InputDimension">
            <summary>
            输入维度. 包装后的维度.
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.TargetFunctionAdapter.OutputDimension">
            <summary>
            
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.TargetFunctionAdapter.Input">
            <summary>
            模型的输入, 缩减维度的之后的输入
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.TargetFunctionAdapter.FullInput">
            <summary>
            模型输入, 原维度的输入
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.TargetFunctionAdapter.Output">
            <summary>
            输出
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.TargetFunctionAdapter.ToOneResult">
            <summary>
            合并多个输出为一个的计算函数委托. 默认算法是直接输出(内部函数单输出)或求和(内部函数多输出).
            如果有自定义的算法或者需要添加罚函数, 请设置此委托.
            输入参数是内部模型计算后的各个维度的输出.
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.TargetFunctionAdapter.#ctor(ijw.Next.Maths.IMimoMathModel,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            构造函数
            </summary>
            <param name="actualFunction">被包装的真实函数</param>
            <param name="targetVarableIndexes">想最终暴露出来的输入索引,注意, 不要重复</param>
            <param name="fullinput">完整的输入</param>
        </member>
        <member name="M:ijw.Next.Maths.TargetFunctionAdapter.Calculate">
            <summary>
            调用内部真实函数进行计算
            </summary>
        </member>
        <member name="F:ijw.Next.Maths.TargetFunctionAdapter._model">
            <summary>
            
            </summary>
        </member>
        <member name="F:ijw.Next.Maths.TargetFunctionAdapter._targetParameterIndexs">
            <summary>
            
            </summary>
        </member>
        <member name="T:ijw.Next.Maths.Vector">
            <summary>
            向量
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.Vector.#ctor(System.Int32)">
            <summary>
            构造一个空向量，各维度为0.
            </summary>
            <param name="dimension"></param>
        </member>
        <member name="M:ijw.Next.Maths.Vector.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            用双精度浮点数的数组构造一个向量
            </summary>
            <param name="data">双精度浮点数的数组</param>
        </member>
        <member name="M:ijw.Next.Maths.Vector.#ctor(System.Double[])">
            <summary>
            用一系列双精度浮点数构造一个向量
            </summary>
        </member>
        <member name="P:ijw.Next.Maths.Vector.Dimension">
            <summary>
            向量维度
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.Vector.One(System.Int32)">
            <summary>
            生成一个单位向量
            </summary>
            <param name="dimension">向量维度</param>
            <returns>生成的单位向量</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Zero(System.Int32)">
            <summary>
            生成一个零向量
            </summary>
            <param name="dimension">向量维度</param>
            <returns>生成的零向量</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.RandomNew(System.Int32)">
            <summary>
            生成一个随机的向量
            </summary>
            <param name="dimension">向量维度</param>
            <returns>新生成的向量</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.AddToSelf(ijw.Next.Maths.Vector)">
            <summary>
            向量加法. 此方法不返回新的向量, 将会改变自身的值
            </summary>
            <param name="addend"></param>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Plus(ijw.Next.Maths.Vector)">
            <summary>
            向量加法，返回新的向量
            </summary>
            <param name="addend">加数</param>
            <returns>新的向量，表示和</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Minus(ijw.Next.Maths.Vector)">
            <summary>
            向量减法，返回新的向量
            </summary>
            <param name="anotherVector">减去</param>
            <returns>新的向量，表示差</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Multipy(System.Double)">
            <summary>
            向量乘法，返回新的向量
            </summary>
            <param name="number">乘以</param>
            <returns>新的向量，表示向量和数字的乘积</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.GetDotProduct(ijw.Next.Maths.Vector)">
            <summary>
            向量点积，返回新的向量
            </summary>
            <param name="anotherVector">另一个向量</param>
            <returns>新的向量，表示向量的点积</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.GetCrossProduct(ijw.Next.Maths.Vector)">
            <summary>
            向量叉乘，返回新的向量
            </summary>
            <param name="anotherVector">另一个向量</param>
            <returns>新的向量，表示向量的叉乘</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.GetNorm">
            <summary>
            用2-范数计算当前向量的模
            </summary>
            <returns>向量的模</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.GetCosineSimilarity(ijw.Next.Maths.Vector)">
            <summary>
            计算与另一个向量的余弦相似度
            </summary>
            <param name="v">另一个向量</param>
            <returns>两个向量的余弦相似度</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.op_Addition(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
             + 操作符重载, 执行向量加法
             注意, 该方法行为像值类型一样, 每次都返回新的浮点向量
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.op_Subtraction(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
             - 操作符重载, 执行向量减法
             注意, 该方法行为像值类型一样, 每次都返回新的浮点向量
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.op_Multiply(ijw.Next.Maths.Vector,System.Double)">
            <summary>
            操作符 * 重载, 实现向量和浮点数的乘法
             注意, 该方法行为像值类型一样, 每次都返回新的浮点向量
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.op_Multiply(System.Double,ijw.Next.Maths.Vector)">
            <summary>
            操作符 * 重载, 实现向量和浮点数的乘法.
             注意, 该方法行为像值类型一样, 每次都返回新的浮点向量
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.op_Division(ijw.Next.Maths.Vector,System.Double)">
            <summary>
            操作符 / 重载, 实现向量除以浮点数的除法
             注意, 该方法行为像值类型一样, 每次都返回新的浮点向量
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.EuclideanDistanceFrom(ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的加权欧式距离
            </summary>
            <param name="anotherVector">另一个向量</param>
            <returns>向量间的加权欧式距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.EuclideanDistanceFrom(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的加权曼哈顿距离
            </summary>
            <param name="anotherVector">另一个向量</param>
            <param name="weights">各维度的权值</param>
            <returns>向量间的加权曼哈顿距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.ManhattanDistanceFrom(ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的曼哈顿距离
            </summary>
            <param name="anotherVector">另一个向量</param>
            <returns>向量间的曼哈顿距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.ManhattanDistanceFrom(ijw.Next.Maths.Vector,ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的加权曼哈顿距离
            </summary>
            <param name="anotherVector">另一个向量</param>
            <param name="weights">各维度的权值</param>
            <returns>向量间的加权曼哈顿距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.MinkowskiDistanceFrom(ijw.Next.Maths.Vector,System.Int32)">
            <summary>
            计算向量间的闵氏距离
            </summary>
            <param name="anotherVector">另一个向量</param>
            <param name="lambda">分量的幂值</param>
            <returns>向量间的闵氏距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.MinkowskiDistanceFrom(ijw.Next.Maths.Vector,System.Int32,ijw.Next.Maths.Vector)">
            <summary>
            计算向量间的加权闵氏距离
            </summary>
            <param name="anotherVector">另一个向量</param>
            <param name="lambda">分量的幂值</param>
            <param name="weights">各维度的权值</param>
            <returns>向量间的加权闵氏距离</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Equals(System.Object)">
            <summary>
            相等比较
            </summary>
            <param name="obj">比较的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Equals(ijw.Next.Maths.Vector)">
            <summary>
            相等比较
            </summary>
            <param name="other">比较的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Equals(ijw.Next.Maths.Vector,System.Double)">
            <summary>
            容忍精度的相等比较
            </summary>
            <param name="other">比较的向量</param>
            <param name="errorTolerance">容忍的精度</param>
            <returns>差别是否小于指定的精度</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Equals(ijw.Next.Maths.Vector,ijw.Next.Collection.IIndexable{System.Double})">
            <summary>
            容忍精度的相等比较
            </summary>
            <param name="other">比较的向量</param>
            <param name="errorTolerance">容忍的精度</param>
            <returns>差别是否小于指定的精度</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.Equlas(ijw.Next.Maths.Vector,System.Collections.Generic.IEqualityComparer{ijw.Next.Maths.Vector})">
            <summary>
            相等比较
            </summary>
            <param name="other">比较的向量</param>
            <param name="equalityComparer">比较器</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.GetHashCode">
            <summary>
            获取hash值
            </summary>
            <returns>hash值</returns>
        </member>
        <member name="M:ijw.Next.Maths.Vector.ToString">
            <summary>
            生成字符串
            </summary>
            <returns>表示自身部分内容的字符串</returns>
        </member>
        <member name="T:ijw.Next.Maths.VectorDoubleStruct">
            <summary>
            向量值类型
            </summary>
        </member>
        <member name="F:ijw.Next.Maths.VectorDoubleStruct.Dimension">
            <summary>
            维度
            </summary>
        </member>
        <member name="F:ijw.Next.Maths.VectorDoubleStruct.Data">
            <summary>
            内部数据
            </summary>
        </member>
        <member name="M:ijw.Next.Maths.VectorDoubleStruct.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="dimension"></param>
        </member>
        <member name="M:ijw.Next.Maths.VectorDoubleStruct.ToString">
            <summary>
            字符串表示
            </summary>
            <returns>字符串</returns>
        </member>
    </members>
</doc>
